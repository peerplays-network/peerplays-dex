# gitlab scanning
include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml
  - template: DAST.gitlab-ci.yml
  
variables:
 SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
 GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
 #DAST_WEBSITE: $DAST_WEBSITE
 DOCKER_DRIVER: overlay2

stages:
  - test
  - build
  - review
  - deploy
  - dast

npm-audit:
  image: "registry.gitlab.com/gitlab-org/security-products/analyzers/npm-audit:1.4.0"
  stage: test
  variables:
    TOOL: npm
  script:
    - /analyzer run
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
    paths:
      - gl-dependency-scanning-report.json

sonarcloud-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - master
    - develop
    - sonar-npm-audit-cicd

# builds app
build_dev:
  # node docker image on which this would be run
  image: node:14.16.1-alpine3.13
  stage: build
  script:
    - apk update && apk add g++ make nasm git libtool autoconf automake libpng-dev pkgconfig
    - echo "DEFAULT_TOKEN='$DEV_TOKEN'" >> .env
    - echo "DEFAULT_QUOTE='$DEV_QUOTE'" >> .env
    - echo "FAUCET_URL='$DEV_FAUCET'" >> .env
    - echo "DEX_URL='$DEV_DEX_URL'" >> .env
    - echo "DEFAULT_CHAIN_ID='$DEV_CHAIN_ID'" >> .env
    - echo "BLOCKCHAIN_ENDPOINTS='$DEV_BLOCKCHAIN_ENDPOINTS'" >> .env
    - npm install
    - npm run build
  artifacts:
    reports:
      dast: gl-dast-report.json
    paths:
      - dist/
    expire_in: 2 weeks
  only:
    - branches
  tags:
    - docker

docker_build:
  image: docker:stable
  stage: build
  services:
    - docker:19.03.12-dind
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -f dev.Dockerfile -t $IMAGE .
    - docker push $IMAGE


deploy_review:
  stage: review
  dependencies:
    - build_dev
  script: 
    - if [ -d "$QA_DEPLOY_DIR" ]; then rm -rf $QA_DEPLOY_DIR/*; else exit 1; fi
    - if [ -d "$QA_DEPLOY_DIR" ]; then cp -R dist/* $QA_DEPLOY_DIR; else exit 1; fi 
    - uglifyjs $QA_DEPLOY_DIR/app.dev.js --compress --mangle --output $QA_DEPLOY_DIR/app.dev.js
    - echo "http://$CI_ENVIRONMENT_SLUG.$APPS_DOMAIN" > environment_url.txt
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.$APPS_DOMAIN
    on_stop: stop_review_app
    auto_stop_in: 1 week
  artifacts:
    paths:
      - environment_url.txt
  only: 
    - branches
  except:
    - develop
  tags:
    - dex-deploy-review

stop_review_app:
  stage: review
  script: stop-review-app
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only: 
    - branches
  except:
    - develop
  tags:
    - dex-deploy-review
  when: manual

deployToDev:
  stage: deploy
  dependencies:
    - build_dev
  script: 
    - rm -rf $DEV_DEPLOY_DIR/*
    - cp -R dist/* $DEV_DEPLOY_DIR
  when:
    manual
  tags:
    - dex1

dast:
  stage: dast
  before_script:
    - if [ "$CI_COMMIT_REF_NAME" != "develop" ]; then export DAST_WEBSITE=$(cat environment_url.txt); else export DAST_WEBSITE=$DAST_WEBSITE; fi
  artifacts:
    paths: [gl-dast-debug-auth-report.html]
    reports:
      dast: gl-dast-report.json
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: never
  - if: $CI_COMMIT_REF_NAME == "develop"
    when: manual
  - when: always
