# gitlab scanning
include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml
  - template: DAST.gitlab-ci.yml

variables:
 SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
 GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
 DAST_WEBSITE: $DAST_WEBSITE
 DOCKER_DRIVER: overlay2

stages:
  - build
  - test
  - deploy
  - dast

# builds app
build:
  # node docker image on which this would be run
  image: node:14.16.1-alpine3.13
  stage: build
  script:
    - apk update && apk add g++ make nasm git
    - npm install
    - .ci/replace_vars.sh
    - cp example.env .env
    - npm run build
  artifacts:
    paths:
      - dist/
  tags:
    - docker

docker_build:
  image: docker:stable
  stage: build
  services:
    - docker:19.03.12-dind
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -f dev.Dockerfile -t $IMAGE .
    - docker push $IMAGE

deploy:
  stage: deploy
  dependencies:
    - build
  script: 
    - deploy $DEPLOY_DIR
  when:
    manual
  tags:
    - ppdex

sonarcloud-check:
 image:
   name: sonarsource/sonar-scanner-cli:latest
   entrypoint: [""]
 cache:
   key: "${CI_JOB_NAME}"
   paths:
     - .sonar/cache
 script:
   - sonar-scanner
 when: manual
